name: Main Workflow

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: ['clang', 'gcc']
        build_type: ['Debug', 'Release', 'MinSizeRel']
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
          - toolchain: clang
            c-compiler: clang
            cxx-compiler: clang++
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: sudo apt install gcc-multilib g++-multilib clang-tidy-12

      - name: Configure CMake
        run: >
          cmake
          -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER=${{ matrix.c-compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }}
          tests

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make VERBOSE=1

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: make test

  sonarcloud:
    if: endsWith(github.base_ref, 'master') || endsWith(github.ref, 'master')
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      CC: gcc
      CXX: g++
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Dependencies
      run: sudo apt install g++ g++-multilib gcc-multilib

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

    - name: Run build-wrapper
      run: |
        cmake tests -DCMAKE_BUILD_TYPE=Debug -DNO_STATIC_ANALYSIS=1
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make all
        make test
        gcov --preserve-paths --long-file-names $(find CMakeFiles/test_general_cov.dir -name '*.gcno')
        gcov --preserve-paths --long-file-names $(find CMakeFiles/test_private_cov.dir -name '*.gcno')

    - name: Run sonar-scanner
      run: >
        sonar-scanner
        --define sonar.projectKey="pavel-kirienko_o1heap"
        --define sonar.organization="pavel-kirienko"
        --define sonar.sources="o1heap/"
        --define sonar.sourceEncoding="UTF-8"
        --define sonar.cfamily.gcov.reportsPath="."
        --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
        --define sonar.cfamily.cache.enabled="false"
        --define sonar.cfamily.threads=1
        --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
        --define sonar.login=${{ secrets.SONAR_TOKEN }}

  style_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: DoozyX/clang-format-lint-action@v0.12
        with:
          source: './o1heap ./tests'
          exclude: './tests/catch'
          extensions: 'c,h,cpp,hpp'
          clangFormatVersion: 12
